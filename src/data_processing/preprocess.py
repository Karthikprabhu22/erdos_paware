import polars as pl
import re
from typing import Optional, List, Tuple

def preprocess_data(DATA_RAW: pl.DataFrame)->pl.DataFrame:
    '''
    Complete basic preprocessing tasks:
        - Drop rows with comments|submissions that have been dropped|deleted
        - Drop rows with comments|submissions automatically generated by a bot
        - Drop rows with comments|submissions that are empty

    Parameters:
    -----------
        DATA_RAW: pl.DataFrame
            A dataframe loaded from the raw Aware data provided
    
    Returns:
    --------
        pl.DataFrame
            A clone of the raw dataframe that has been preprocessed as 
            described above

    Example:
    --------
    ## Load raw data
    DATA_PARQUET = "../temp_data/raw_data_subset_gm.parquet"
    DATA_RAW = pl.read_parquet(DATA_PARQUET)
    ## Implement preprocessing
    data_preprocessed = preprocess_data(DATA_RAW=DATA_RAW)
    '''
    
    ## Clone raw data
    data_preprocessed = DATA_RAW.clone()
    
    ## Drop rows with comments|submissions that have been dropped|deleted

    values_to_drop = ["[deleted]", "[removed]"]
    
    for value in values_to_drop:
        
        mask = (data_preprocessed["reddit_text"] != value)
        
        print(f"Dropping {data_preprocessed.filter(~mask).shape[0]} rows with "+
            f"reddit_text=='{value}'")
        
        data_preprocessed = data_preprocessed.filter(mask)

    ## Drop rows with comments|submissions automatically generated by a bot

    pattern =(r"This has been removed for breaking the sub rule of")
    mask = data_preprocessed["reddit_text"].str.contains(pattern)
    
    print(f"Dropping {data_preprocessed.filter(mask).shape[0]} rows with "+
        "reddit_text containing:"+
        "'This has been removed for breaking the sub rule of'")
    
    data_preprocessed = data_preprocessed.filter(~mask)

    ## Drop rows with comments|submissions that are empty

    mask = (data_preprocessed["reddit_text"]=="")
    
    print(f"Dropping {data_preprocessed.filter(mask).shape[0]} rows with "+
            f"reddit_text==''")
    
    data_preprocessed = data_preprocessed.filter(~mask)
    
    return data_preprocessed